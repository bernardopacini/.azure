parameters:
- name: REPO_NAME
  type: string
- name: COMPLEX
  type: boolean
- name: GCC_CONFIG
  type: string
- name: INTEL_CONFIG
  type: string
- name: EXEC_TESTS
  type: string

jobs:
- job:
  strategy:
    matrix:
      'c7-gcc-ompi-latest':
        DOCKER_TAG: c7-gcc-ompi-latest
        CONFIG_FILE: ${{ parameters.GCC_CONFIG }}
      'c7-intel-impi-latest':
        DOCKER_TAG: c7-intel-impi-latest
        CONFIG_FILE: ${{ parameters.INTEL_CONFIG }}
      'u20-gcc-ompi-latest':
        DOCKER_TAG: u20-gcc-ompi-latest
        CONFIG_FILE: ${{ parameters.GCC_CONFIG }}
      'u20-gcc-ompi-stable':
        DOCKER_TAG: u20-gcc-ompi-stable
        CONFIG_FILE: ${{ parameters.GCC_CONFIG }}
  variables:
    MDOLAB_USER: /home/mdolabuser/
    DOCKER_WORKING_DIR: ${{ variables.MDOLAB_USER }}/repos/${{ parameters.REPO_NAME }}
    DOCKER_MOUNT_DIR: ${{ variables.MDOLAB_USER }}/travis/${{ parameters.REPO_NAME }}
  steps:
  - script: |
      docker pull mdolab/public:$(DOCKER_TAG)
      docker run -t -d --name app --mount "type=bind,src=$(pwd),target=${{ variables.DOCKER_MOUNT_DIR }}" mdolab/public:$(DOCKER_TAG) /bin/bash
      docker exec app /bin/bash -c "rm -rf ${{ variables.DOCKER_WORKING_DIR }} && cp -r ${{ variables.DOCKER_MOUNT_DIR }} ${{ variables.DOCKER_WORKING_DIR }}"
      docker exec app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd ${{ variables.DOCKER_WORKING_DIR }} && cp $(CONFIG_FILE) config/config.mk && make";
      docker exec app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd ${{ variables.DOCKER_WORKING_DIR }} && pip install ."
      ${{ parameters.EXEC_TESTS }}
      docker rm -f app
# docker exec app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd ${{ variables.DOCKER_WORKING_DIR }} && testflo . -v"

# - job:
#   condition: eq(${{ parameters.COMPLEX }}, true)
#   strategy:
#     matrix:
#       'c7-gcc-ompi-latest':
#         DOCKER_TAG: c7-gcc-ompi-latest
#       'c7-intel-impi-latest':
#         DOCKER_TAG: c7-intel-impi-latest
#       'u20-gcc-ompi-latest':
#         DOCKER_TAG: u20-gcc-ompi-latest
#       'u20-gcc-ompi-stable':
#         DOCKER_TAG: u20-gcc-ompi-stable
#   variables:
#     MDOLAB_USER: /home/mdolabuser/
#     DOCKER_WORKING_DIR: ${{ variables.MDOLAB_USER }}/repos/${{ parameters.REPO_NAME }}
#     DOCKER_MOUNT_DIR: ${{ variables.MDOLAB_USER }}/travis/${{ parameters.REPO_NAME }}
#   steps:
#   - script: |
#       docker pull mdolab/public:$(DOCKER_TAG)
#       docker run -t -d --name app --mount "type=bind,src=$(pwd),target=${{ variables.DOCKER_MOUNT_DIR }}" mdolab/public:$(DOCKER_TAG) /bin/bash
#       docker exec app /bin/bash -c "rm -rf ${{ variables.DOCKER_WORKING_DIR }} && cp -r ${{ variables.DOCKER_MOUNT_DIR }} ${{ variables.DOCKER_WORKING_DIR }}"
#       docker exec app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd ${{ variables.DOCKER_WORKING_DIR }} && cp config/defaults/config.LINUX_GFORTRAN.mk config/config.mk && make";
#       docker exec app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd ${{ variables.DOCKER_WORKING_DIR }} && pip install ."
#       docker exec app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd ${{ variables.DOCKER_WORKING_DIR }} && testflo . -v"
#       docker rm -f app

# - job: flake8
#   steps:
#   - checkout: self
#   - checkout: azure_template
#   - script: |
#       cd ${{ parameters.REPO_NAME }}
#       cp ../.azure/.flake8 .
#       python3 -m pip install -U pip
#       pip3 install flake8
#       python3 -m flake8 . --count --show-source --statistics

# - job: black
#   steps:
#   - script: |
#       python3 -m pip install -U pip
#       pip3 install black==20.8b1
#       python3 -m black . --check --diff -l 120